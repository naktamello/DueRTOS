#include <cross_studio_io.h>
#include <sam3x8e.h>
//#include <sam.h>
#include <FreeRTOS.h>
#include <semphr.h>
#include <stdio.h>
#include <task.h>
#include <portmacro.h>
//#include <init_my.h>
#include <string.h>
#include <sysclk.h>
#include <serial.h>
#include <uart.h>
#include <pmc.h>
#include <sd_mmc.h>
#include <spi_master.h>
#include <ff.h>
#include <ctrl_access.h>
#include <adc.h>
#include <freertos_uart_serial.h>
#include <pio.h>
#include <dht11.h>
#include <ili9341.h>
#include <dmac.h>
//#include <stdio_serial.h>
//#include <spi_my.h>
//#include <sd_spi_my.h>

//#define UART
#define SPI_SD_CARD                   SPI0
#define SPI_DEVICE_SD_CARD_ID         (0x0)
#define SPI_SD_CARD_BAUDRATE          2100000
#define SPI_TFT_DISPLAY               SPI0
#define SPI_DEVICE_TFT_DISPLAY_ID     (0x1)
#define SPI_TFT_DISPLAY_BAUDRATE      2100000


#define LED (1 << 14)
#define SENSOR ( 1 << 12)

#define DMA_CH 0


struct spi_device SPI_DEVICE_SD_CARD = {
	/** Board specific select id */
	.id = SPI_DEVICE_SD_CARD_ID
};

struct spi_device SPI_DEVICE_TFT_DISPLAY = {
	/** Board specific select id */
	.id = SPI_DEVICE_TFT_DISPLAY_ID
};

static void prvSetupHardware( void );
void vApplicationMallocFailedHook( void );
void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName );

static void vBlinkTask( void *pvParameters );
static void vPeriodicTask ( void *pvParameters );
static void vAdcTask ( void *pvParameters );
static void vDhtTask ( void *pvParameters );

void board_set_led(unsigned v, int led);
void setup_dmac(void);
void setup_io_pin(void);
void delay(volatile unsigned int d);
void test_sd(void);
void sd_bmp_read(void);
void adc_setup(void);
void ADC_IrqHandler(void);
static void configure_console(void);

static void
UARTWriteChar(char ch)
{
  while (!(UART->UART_SR & UART_SR_TXRDY));
  UART->UART_THR = ch;
}
void __putchar(int ch)
{
  if (ch == '\n')
    UARTWriteChar('\r');
  UARTWriteChar(ch);
}


//extern void spi_master_initialize(void);
//extern void spi_master_test(void);
xSemaphoreHandle xBinarySemaphore;
uint8_t dht_resp[5];

int
main(void)
{
vSemaphoreCreateBinary( xBinarySemaphore );
while( xBinarySemaphore == NULL);
prvSetupHardware();


//test_sd();
//sd_bmp_read();
xTaskCreate( vAdcTask,"ADC", 240, NULL, ( UBaseType_t ) 5, NULL);
xTaskCreate( vPeriodicTask, "PERIODIC", 512, NULL, ( UBaseType_t ) 4, NULL );
xTaskCreate( vBlinkTask, "BLINK", 512, NULL, ( UBaseType_t ) 2, NULL );
xTaskCreate( vDhtTask, "DHT", 1024, NULL, 3, NULL );
vTaskStartScheduler();

for(;;)
{
  board_set_led(1, LED);
  delay(100);
   board_set_led(0, LED);
  delay(100);
}

}
void vApplicationMallocFailedHook( void )
{
	/* vApplicationMallocFailedHook() will only be called if
	configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h.  It is a hook
	function that will get called if a call to pvPortMalloc() fails.
	pvPortMalloc() is called internally by the kernel whenever a task, queue,
	timer or semaphore is created.  It is also called by various parts of the
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
	for( ;; );
}
void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
	( void ) pcTaskName;
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
}

static void prvSetupHardware( void )
{
extern void SystemCoreClockUpdate( void );

//	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping( 0 );

        sysclk_init();
	board_init();
        configure_console();

        /* Configure SPI */
	pmc_enable_periph_clk(ID_SPI0);
	spi_master_init(SPI0);
        //spi_set_variable_peripheral_select(SPI0);
	//spi_master_setup_device(SPI_SD_CARD, &SPI_DEVICE_SD_CARD, SPI_MODE_0,
	//SPI_SD_CARD_BAUDRATE, 0);
        spi_master_setup_device(SPI_TFT_DISPLAY, &SPI_DEVICE_TFT_DISPLAY, SPI_MODE_0,
        SPI_TFT_DISPLAY_BAUDRATE, 1);
	spi_enable(SPI0);

	/* Initialize SD MMC stack */
	//sd_mmc_init();

        setup_io_pin();
        adc_setup();
        dht_init();
        ILI9341_init();
}

static void vBlinkTask( void *pvParameters )
{
static int led_state = 0;
for(;;)
{
board_set_led(led_state, LED);

if (led_state)
  {
  led_state = 0;
  }
else
  {
  led_state = 1;
  }

vTaskDelay( 1000 / portTICK_RATE_MS);

}
}

static void vPeriodicTask ( void *pvParameters )
{
//int sd_status = 0;
//ILI9341_init();
//ILI9341_draw_line(0,0,239,319,CYAN);
//ILI9341_draw_horizontal(5,40,220,YELLOW);
//ILI9341_draw_vertical(100,100,100,BLACK);
//ILI9341_draw_char('S',50,50,5,RED);



for(;;)
{

puts("periodic task");
xSemaphoreGive(xBinarySemaphore);

//if (sd_status == 0)
//{
////test_sd();
//sd_bmp_read();
//sd_status = 1;
//}



//uint8_t msg_0[] = {0x01, 0x02, 0x03, 0x04};
//spi_select_device(SPI0, &SPI_DEVICE_TFT_DISPLAY);
//spi_write_single(SPI0, 0x01);
//spi_write_single(SPI0, 0x02);
//spi_write_single(SPI0, 0x03);
//spi_deselect_device(SPI0, &SPI_DEVICE_TFT_DISPLAY);


//uint8_t msg_1[] = {0x05, 0x06, 0x07, 0x08};
//spi_select_device(SPI0, &SPI_DEVICE_SD_CARD);
//spi_write_packet(SPI0, msg_1, sizeof(msg_1));
//spi_deselect_device(SPI0, &SPI_DEVICE_SD_CARD);


//taskENTER_CRITICAL();
//ILI9341_read_ID();
//ILI9341_init();
//taskEXIT_CRITICAL();
//ILI9341_data16(RED);

//board_toggle_led();
adc_start(ADC);



vTaskDelay( 1000 / portTICK_RATE_MS);


}
}

static void vAdcTask ( void *pvParameters )
{

        //adc_start(ADC);
	xSemaphoreTake( xBinarySemaphore, 0 );
	for( ;; )
	{
		xSemaphoreTake( xBinarySemaphore, 200/portTICK_RATE_MS);
		//Check the ADC conversion status
		if ((adc_get_status(ADC) & ADC_ISR_DRDY) == ADC_ISR_DRDY)
		{
			//Get latest digital data value from ADC and can be used by application
			uint32_t result = adc_get_latest_value(ADC);
                        //printf("ADC value = %4d\n", result);
                        char msg[8];
                        itoa(result, msg, 10);
                        ILI9341_fill_screen_xy(0,239,0,40,BLACK);
                        ILI9341_draw_string(msg, 10, 10, 3, RED);
		}
	}

}

static void vDhtTask ( void *pvParamters )
{
static int dht_status;
        for( ;; )
        {
        //taskENTER_CRITICAL();
        dht_status = dht_read_sensor(dht_resp);
        //taskEXIT_CRITICAL();

        if (dht_status)
        {
        puts("response: ");
        printf("RHumidity = %4d\n", dht_resp[0]);
        printf("Temperature = %4d C\n", dht_resp[2]);
        }

        else
        puts("DHT read fail\n");
          vTaskDelay( 1000 / portTICK_RATE_MS);
        }

}


void
board_set_led(unsigned v, int led)
{
  if (v)
  pio_set(PIOB, led);
    //PIOB->PIO_CODR = led;
  else
  pio_clear(PIOB, led);
    //PIOB->PIO_SODR = led;
}



void
delay(volatile unsigned int d)
{
d = d*5000;
  for (;d ;--d);
}

void test_sd(void)
{
	
	char test_file_name[] = "0:hello_world.txt";
	Ctrl_status status;
	FRESULT res;
	FATFS fs;
	FIL file_object;
	
	puts("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");

		puts("Please plug an SD, MMC or SDIO card in slot.\n\r");

		
		/* Wait card present and ready */
		do {
		status = sd_mmc_test_unit_ready(0);
		if (CTRL_FAIL == status) {
		puts("Card install FAIL\n\r");
		puts("Please unplug and re-plug the card.\n\r");
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
		}
		}
		} while (CTRL_GOOD != status);

		puts("Mount disk (f_mount)...\r\n");
		memset(&fs, 0, sizeof(FATFS));
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
		if (FR_INVALID_DRIVE == res) {
			puts("[FAIL] res \r\n");
			goto main_end_of_test;
		}
		puts("[OK]\r\n");

		puts("Create a file (f_open)...\r\n");
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
		res = f_open(&file_object,
		(char const *)test_file_name,
		FA_CREATE_ALWAYS | FA_WRITE);
		if (res != FR_OK) {
			puts("[FAIL] res \r\n");
			goto main_end_of_test;
		}
		puts("[OK]\r\n");

		puts("Write to test file (f_puts)...\r\n");
		if (0 == f_puts("I like big butts and I cannot lie :)\n", &file_object)) {
			f_close(&file_object);
			printf("[FAIL]\r\n");
			goto main_end_of_test;
		}
		puts("[OK]\r\n");
		f_close(&file_object);
		puts("Test is successful.\n\r");

		main_end_of_test:
		puts("Please unplug the card.\n\r");
		
/*
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
		}*/

}

//FIL file_object;
void sd_bmp_read(void)
{
                char file_name[] = "0:hibiscus.bmp";
                Ctrl_status status;
                FRESULT res;
                FATFS fs;
                FIL file_object;
               static char buffer[512];
                int bytes_read;

		do {
		status = sd_mmc_test_unit_ready(0);
		if (CTRL_FAIL == status) {
		puts("Card install FAIL\n\r");
		puts("Please unplug and re-plug the card.\n\r");
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
		}
		}
		} while (CTRL_GOOD != status);

		puts("Mount disk (f_mount)...\r\n");
		memset(&fs, 0, sizeof(FATFS));
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
		if (FR_INVALID_DRIVE == res) {
			puts("mount [FAIL] res \r\n");
		}
		else puts("mount [OK]\r\n");

		puts("open bitmap (f_open)...\r\n");
		file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
		res = f_open(&file_object,
		(char const *)file_name,
		FA_READ | FA_OPEN_EXISTING);
		if (res != FR_OK) {
                        printf("open [FAIL]: %d \r\n", res);
			//puts("open [FAIL] res \r\n");
		}
		else
                {
                puts("open [OK]\r\n");
                //res = f_read(&file_object, buffer, 512, &bytes_read);
                //delay_ms(10);

                //for (int i = 0; i < 5; i++)
                //printf("0x%8x\r\n", ILI9341_read32(&file_object));
                //delay_us(100);
                ILI9341_read_header(&file_object);

                ILI9341_bmp_draw(&file_object, 0, 0);
                }


}

void setup_dmac(void)
{
uint32_t cfg;
cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;

pmc_enable_periph_clk(ID_DMAC);
dmac_init(DMAC);
dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
dmac_enable(DMAC);

dmac_channel_set_configuration(DMAC, DMA_CH, cfg);

}

void setup_io_pin(void)
{

pmc_enable_periph_clk(ID_PIOB);
pio_set_output(PIOB, LED, 0, 0, 0);



}

void adc_setup(void)
{
	pmc_enable_periph_clk(ID_ADC);
	
	adc_init(ADC, sysclk_get_main_hz(), 6400000, ADC_STARTUP_TIME_4);

	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);

	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);

	adc_enable_channel(ADC, ADC_CHANNEL_5);

	adc_enable_interrupt(ADC, ADC_IER_DRDY);

	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
}

void ADC_IrqHandler(void)
{
/*
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
        adc_get_status(ADC);
       	xSemaphoreGiveFromISR( xBinarySemaphore, &xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
        */
}

static uint8_t receive_buffer[50] = {0};
static void configure_console(void)
{
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
	uart_settings.ul_baudrate = 115200;
	uart_settings.ul_mode = UART_MR_PAR_NO;

	freertos_peripheral_options_t driver_options = {
		receive_buffer,									/* The buffer used internally by the UART driver to store incoming characters. */
		50,							/* The size of the buffer provided to the UART driver to store incoming characters. */
		configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY,	/* The priority used by the UART interrupts. */
		UART_RS232,									/* Configure the UART for RS232 operation. */
		(WAIT_TX_COMPLETE | USE_TX_ACCESS_MUTEX)		/* Use access mutex on Tx (as more than one task transmits) but not Rx. Wait for a Tx to complete before returning from send functions. */
	};

        freertos_uart_serial_init(UART, &uart_settings, &driver_options);

	const usart_serial_options_t uart_serial_options = {
		.baudrate = 115200,
		.paritytype = CONF_UART_PARITY
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
        //usart_serial_init(UART, &uart_serial_options);
	//stdio_serial_init(CONF_UART, &uart_serial_options);

}